{"version":3,"sources":["pages/Character/queries/getCharacter.generated.tsx","components/SVG/SpinnerSVG.tsx","components/Spinner/Spinner.tsx","components/ErrorModal/ErrorModal.tsx","pages/Character/components/Character.tsx","components/Page/Page.tsx","pages/Character/CharacterPage.tsx","pages/Characters/components/CharactersListItem.tsx","pages/Characters/components/CharactersList.tsx","pages/Characters/queries/getCharacters.generated.tsx","hooks/useSearchParams.ts","components/Pagination/Pagination.tsx","pages/Characters/CharactersPage.tsx","Application.tsx","reportWebVitals.ts","apollo/cache.ts","apollo/client.ts","index.tsx","components/ErrorModal/ErrorModal.module.css","components/Spinner/Spinner.module.css","components/Page/Page.module.css","components/Pagination/Pagination.module.css"],"names":["GetCharacterDocument","gql","SpinnerType","SpinnerSvg","width","height","className","viewBox","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","Spinner","Local","SpinnerSVG","styles","spinner","data-testid","wholePageCover","ErrorModal","message","reload","history","useHistory","is404","ariaHideApp","modal","overlayClassName","overlay","isOpen","contentLabel","testId","modalHeader","modalTitle","modalBody","modalFooter","onClick","replace","go","Character","character","origin","location","name","status","species","gender","image","src","alt","dimension","episode","map","id","Page","dataTestId","children","page","CharacterPage","baseOptions","params","useParams","getJobQuery","variables","characterId","Apollo","loading","FullPage","error","data","CharactersListItem","link","CharactersList","characters","GetCharactersDocument","useSearchParams","useLocation","useMemo","URLSearchParams","search","Pagination","prev","next","searchParams","prevLink","nextLink","set","String","prevSearchStr","nextSearchStr","wrapper","CharactersPage","Number","get","getCharactersQuery","results","info","Application","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","cache","InMemoryCache","typePolicies","customFetch","uri","options","body","operationName","JSON","parse","fetch","client","httpLink","createHttpLink","process","ApolloClient","ApolloLink","getClient","Router","HashRouter","ReactDOM","render","StrictMode","apolloClient","basename","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.96980281.chunk.js","sourcesContent":["// ⚠️ DO NOT EDIT ⚠️\n// This file is automatically generated, run npm run graphql:codegen to update\n\nimport * as Types from '../../../apollo/gen_types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type GetCharacterQueryVariables = Types.Exact<{\n  characterId: Types.Scalars['ID'];\n}>;\n\nexport type GetCharacterQuery = { __typename?: 'Query' } & {\n  character?: Types.Maybe<\n    { __typename?: 'Character' } & Pick<\n      Types.Character,\n      'id' | 'name' | 'status' | 'species' | 'type' | 'gender' | 'image'\n    > & {\n        origin?: Types.Maybe<\n          { __typename?: 'Location' } & Pick<\n            Types.Location,\n            'name' | 'type' | 'dimension'\n          >\n        >;\n        location?: Types.Maybe<\n          { __typename?: 'Location' } & Pick<\n            Types.Location,\n            'id' | 'name' | 'type' | 'dimension'\n          >\n        >;\n        episode?: Types.Maybe<\n          Array<\n            Types.Maybe<\n              { __typename?: 'Episode' } & Pick<Types.Episode, 'id' | 'name'>\n            >\n          >\n        >;\n      }\n  >;\n};\n\nexport const GetCharacterDocument = gql`\n  query getCharacter($characterId: ID!) {\n    character(id: $characterId) {\n      id\n      name\n      status\n      species\n      type\n      gender\n      origin {\n        name\n        type\n        dimension\n      }\n      location {\n        id\n        name\n        type\n        dimension\n      }\n      image\n      episode {\n        id\n        name\n      }\n    }\n  }\n`;\n\n/**\n * __useGetCharacterQuery__\n *\n * To run a query within a React component, call `useGetCharacterQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCharacterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCharacterQuery({\n *   variables: {\n *      characterId: // value for 'characterId'\n *   },\n * });\n */\nexport function useGetCharacterQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    GetCharacterQuery,\n    GetCharacterQueryVariables\n  >\n) {\n  return Apollo.useQuery<GetCharacterQuery, GetCharacterQueryVariables>(\n    GetCharacterDocument,\n    baseOptions\n  );\n}\nexport function useGetCharacterLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetCharacterQuery,\n    GetCharacterQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<GetCharacterQuery, GetCharacterQueryVariables>(\n    GetCharacterDocument,\n    baseOptions\n  );\n}\nexport type GetCharacterQueryHookResult = ReturnType<\n  typeof useGetCharacterQuery\n>;\nexport type GetCharacterLazyQueryHookResult = ReturnType<\n  typeof useGetCharacterLazyQuery\n>;\nexport type GetCharacterQueryResult = Apollo.QueryResult<\n  GetCharacterQuery,\n  GetCharacterQueryVariables\n>;\n","import React, { FC } from 'react';\n\ntype SpinnerSvgProps = {\n  width?: number;\n  height?: number;\n  className?: string;\n};\n\nconst SpinnerSvg: FC<SpinnerSvgProps> = ({ width, height, className }) => (\n  <svg width={width} height={height} viewBox=\"0 0 38 38\" className={className}>\n    <g fill=\"none\" fillRule=\"evenodd\">\n      <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n        <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n        <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n          <animateTransform\n            attributeName=\"transform\"\n            type=\"rotate\"\n            from=\"0 18 18\"\n            to=\"360 18 18\"\n            dur=\"1s\"\n            repeatCount=\"indefinite\"\n          />\n        </path>\n      </g>\n    </g>\n  </svg>\n);\n\nexport default SpinnerSvg;\n","import React, { FC } from 'react';\n\nimport SpinnerSVG from 'components/SVG/SpinnerSVG';\nimport styles from './Spinner.module.css';\n\nexport const SPINNER_TEST_ID = 'spinner';\n\nexport enum SpinnerType {\n  Local = 'local',\n  FullPage = 'fullPage',\n}\n\ntype SpinnerProps = {\n  width?: number;\n  height?: number;\n  type?: SpinnerType;\n};\n\nconst Spinner: FC<SpinnerProps> = ({\n  width = 38,\n  height = 38,\n  type = SpinnerType.Local,\n}) => {\n  const SpinnerSvg = (\n    <SpinnerSVG width={width} height={height} className={styles.spinner} />\n  );\n\n  if (type === SpinnerType.Local) {\n    return SpinnerSvg;\n  }\n\n  return (\n    <div data-testid={SPINNER_TEST_ID} className={styles.wholePageCover}>\n      {SpinnerSvg}\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { FC } from 'react';\n\nimport Modal from 'react-modal';\nimport { useHistory } from 'react-router-dom';\nimport styles from './ErrorModal.module.css';\n\nexport const ERROR_MODAL_TEST_ID = 'error-modal';\nexport const ERROR_MODAL_RELOAD_BUTTON_TEST_ID = 'error-modal-reload-button';\n\nexport type ErrorModalProps = {\n  message: string;\n  reload?: () => void;\n};\n\nconst ErrorModal: FC<ErrorModalProps> = ({ message, reload }) => {\n  const history = useHistory();\n\n  const is404 = message === '404: Not Found';\n\n  const reloadHandler = () => {\n    if (is404) {\n      history.replace('/');\n    } else if (reload) {\n      reload();\n    } else {\n      history.go(0);\n    }\n  };\n\n  return (\n    <Modal\n      ariaHideApp={false}\n      className={styles.modal}\n      overlayClassName={styles.overlay}\n      isOpen\n      contentLabel=\"Error Modal\"\n      testId={ERROR_MODAL_TEST_ID}\n    >\n      <header className={styles.modalHeader}>\n        <h2 className={styles.modalTitle}>Error</h2>\n      </header>\n\n      <div className={styles.modalBody}>\n        <p>{message}</p>\n      </div>\n      <footer className={styles.modalFooter}>\n        <button\n          data-testid={ERROR_MODAL_RELOAD_BUTTON_TEST_ID}\n          onClick={reloadHandler}\n        >\n          {is404 ? 'Go to home page' : 'Reload'}\n        </button>\n      </footer>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React, { FC } from 'react';\n\nimport {\n  Character as CharacterType,\n  Location,\n  Episode,\n  Maybe,\n} from 'apollo/gen_types';\n\nexport const CHARACTER_TEST_ID = 'character';\n\ntype CharacterProps = {\n  character?: Maybe<\n    Pick<\n      CharacterType,\n      | 'name'\n      | 'status'\n      | 'species'\n      | 'type'\n      | 'gender'\n      | 'image'\n      | 'location'\n      | 'episode'\n    > & {\n      origin?: Maybe<Pick<Location, 'name' | 'dimension' | 'type'>>;\n      location?: Maybe<Pick<Location, 'name' | 'dimension' | 'type'>>;\n      episode?: Maybe<Maybe<Pick<Episode, 'name' | 'id'>>[]>;\n    }\n  >;\n};\n\nconst Character: FC<CharacterProps> = ({ character }) => {\n  if (!character) {\n    return null;\n  }\n\n  const origin = character.origin;\n  const location = character.location;\n\n  return (\n    <div data-testid={CHARACTER_TEST_ID}>\n      <div>Character:</div>\n      <div>Name: {character.name}</div>\n      <div>Status: {character.status}</div>\n      <div>Species: {character.species}</div>\n      <div>Type: {character.type}</div>\n      <div>Gender: {character.gender}</div>\n      <div>\n        {character.image && (\n          <img src={character.image} alt={`${character.name} avatar`} />\n        )}\n      </div>\n      <div>Origin:</div>\n      <div>{origin?.name}</div>\n      <div>{origin?.dimension}</div>\n      <div>{origin?.type}</div>\n      <div>Location:</div>\n      <div>{location?.name}</div>\n      <div>{location?.type}</div>\n      <div>{location?.dimension}</div>\n      <div>episode:</div>\n      <ul>\n        {character.episode?.map((episode) => (\n          <li key={episode?.id}>{episode?.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Character;\n","import React, { FC } from 'react';\n\nimport styles from './Page.module.css';\n\nexport const PAGE_TEST_ID = 'page';\n\nexport type PageProps = {\n  'data-testid'?: string;\n};\n\nconst Page: FC<PageProps> = ({\n  'data-testid': dataTestId = PAGE_TEST_ID,\n  children,\n}) => {\n  return (\n    <div data-testid={dataTestId} className={styles.page}>\n      {children}\n    </div>\n  );\n};\n\nexport default Page;\n","import React from 'react';\n\nimport { useParams } from 'react-router';\nimport { useGetCharacterQuery } from './queries/getCharacter.generated';\nimport Spinner, { SpinnerType } from 'components/Spinner/Spinner';\nimport ErrorModal from 'components/ErrorModal/ErrorModal';\nimport Character from './components/Character';\nimport Page from 'components/Page/Page';\n\nexport const CHARACTER_PAGE_TEST_ID = 'character-page';\n\ntype CharacterParams = { characterId: string };\n\nconst CharacterPage = () => {\n  const params = useParams<CharacterParams>();\n\n  const getJobQuery = useGetCharacterQuery({\n    variables: { characterId: params.characterId },\n  });\n\n  if (getJobQuery.loading) {\n    return <Spinner type={SpinnerType.FullPage} />;\n  }\n\n  if (getJobQuery.error) {\n    return <ErrorModal message={getJobQuery.error.message} />;\n  }\n\n  const character = getJobQuery.data?.character;\n\n  return (\n    <Page data-testid={CHARACTER_PAGE_TEST_ID}>\n      <Character character={character} />\n    </Page>\n  );\n};\n\nexport default CharacterPage;\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Character } from 'apollo/gen_types';\n\nexport const CHARACTERS_LIST_ITEM_TEST_ID = 'characters-list-item';\n\nexport type CharactersListItemProps = {\n  character: Pick<Character, 'id' | 'name' | 'status' | 'species' | 'image'>;\n};\n\nconst CharactersListItem: FC<CharactersListItemProps> = ({ character }) => {\n  const link = `/characters/${character.id}`;\n  return (\n    <tr data-testid={CHARACTERS_LIST_ITEM_TEST_ID}>\n      <td>\n        {character.image && (\n          <img\n            width=\"50\"\n            height=\"50\"\n            src={character.image}\n            alt={`${character.name} avatar`}\n          />\n        )}\n      </td>\n      <td>{character.name}</td>\n      <td>{character.species}</td>\n      <td>{character.status}</td>\n      <td>\n        <Link to={link}>view</Link>\n      </td>\n    </tr>\n  );\n};\n\nexport default CharactersListItem;\n","import { FC } from 'react';\n\nimport CharactersListItem, {\n  CharactersListItemProps,\n} from './CharactersListItem';\nimport { Maybe } from 'apollo/gen_types';\n\nexport const CHARACTERS_LIST_TEST_ID = 'characters-list';\n\ntype CharactersListProps = {\n  characters?: Maybe<Maybe<CharactersListItemProps['character']>[]>;\n};\n\nconst CharactersList: FC<CharactersListProps> = ({ characters }) => {\n  return (\n    <table data-testid={CHARACTERS_LIST_TEST_ID}>\n      <tbody>\n        {characters?.map((character) => {\n          if (!character) return null;\n\n          return (\n            <CharactersListItem key={character.id} character={character} />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default CharactersList;\n","// ⚠️ DO NOT EDIT ⚠️\n// This file is automatically generated, run npm run graphql:codegen to update\n\nimport * as Types from '../../../apollo/gen_types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type GetCharactersQueryVariables = Types.Exact<{\n  page?: Types.Maybe<Types.Scalars['Int']>;\n}>;\n\nexport type GetCharactersQuery = { __typename?: 'Query' } & {\n  characters?: Types.Maybe<\n    { __typename?: 'Characters' } & {\n      info?: Types.Maybe<\n        { __typename?: 'Info' } & Pick<\n          Types.Info,\n          'count' | 'pages' | 'next' | 'prev'\n        >\n      >;\n      results?: Types.Maybe<\n        Array<\n          Types.Maybe<\n            { __typename?: 'Character' } & Pick<\n              Types.Character,\n              'id' | 'name' | 'status' | 'species' | 'image'\n            >\n          >\n        >\n      >;\n    }\n  >;\n};\n\nexport const GetCharactersDocument = gql`\n  query getCharacters($page: Int) {\n    characters(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        id\n        name\n        status\n        species\n        image\n      }\n    }\n  }\n`;\n\n/**\n * __useGetCharactersQuery__\n *\n * To run a query within a React component, call `useGetCharactersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCharactersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCharactersQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useGetCharactersQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    GetCharactersQuery,\n    GetCharactersQueryVariables\n  >\n) {\n  return Apollo.useQuery<GetCharactersQuery, GetCharactersQueryVariables>(\n    GetCharactersDocument,\n    baseOptions\n  );\n}\nexport function useGetCharactersLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetCharactersQuery,\n    GetCharactersQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<GetCharactersQuery, GetCharactersQueryVariables>(\n    GetCharactersDocument,\n    baseOptions\n  );\n}\nexport type GetCharactersQueryHookResult = ReturnType<\n  typeof useGetCharactersQuery\n>;\nexport type GetCharactersLazyQueryHookResult = ReturnType<\n  typeof useGetCharactersLazyQuery\n>;\nexport type GetCharactersQueryResult = Apollo.QueryResult<\n  GetCharactersQuery,\n  GetCharactersQueryVariables\n>;\n","import { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport const useSearchParams = (): URLSearchParams => {\n  const location = useLocation();\n\n  const searchParams = useMemo(() => new URLSearchParams(location.search), [\n    location.search,\n  ]);\n\n  return searchParams;\n};\n","import React, { FC } from 'react';\n\nimport { Link } from 'react-router-dom';\nimport { useSearchParams } from 'hooks/useSearchParams';\nimport styles from './Pagination.module.css';\n\nexport const PAGINATION_TEST_ID = 'pagination';\n\ntype PaginationProps = {\n  prev?: number | null;\n  next?: number | null;\n};\n\nconst Pagination: FC<PaginationProps> = ({ prev, next }) => {\n  const searchParams = useSearchParams();\n\n  let prevLink = null;\n  let nextLink = null;\n\n  if (prev) {\n    searchParams.set('page', String(prev));\n    const prevSearchStr = String(searchParams);\n    prevLink = (\n      <Link\n        to={() => ({\n          search: prevSearchStr,\n        })}\n      >\n        Prev\n      </Link>\n    );\n  }\n\n  if (next) {\n    searchParams.set('page', String(next));\n    const nextSearchStr = String(searchParams);\n    nextLink = (\n      <Link\n        to={() => ({\n          search: nextSearchStr,\n        })}\n      >\n        Next\n      </Link>\n    );\n  }\n\n  return (\n    <div data-testid={PAGINATION_TEST_ID} className={styles.wrapper}>\n      {prevLink}\n      {nextLink}\n    </div>\n  );\n};\n\nexport default Pagination;\n","import { FC } from 'react';\n\nimport CharactersList from './components/CharactersList';\nimport Spinner, { SpinnerType } from 'components/Spinner/Spinner';\nimport ErrorModal from 'components/ErrorModal/ErrorModal';\nimport { useGetCharactersQuery } from './queries/getCharacters.generated';\nimport { useSearchParams } from 'hooks/useSearchParams';\nimport Pagination from 'components/Pagination/Pagination';\nimport Page from 'components/Page/Page';\n\nexport const CHARACTERS_PAGE_TEST_ID = 'characters-page';\n\nconst CharactersPage: FC = () => {\n  const searchParams = useSearchParams();\n\n  const page = Number(searchParams.get('page') ?? 1);\n\n  const getCharactersQuery = useGetCharactersQuery({\n    variables: { page },\n  });\n\n  if (getCharactersQuery.loading) {\n    return <Spinner type={SpinnerType.FullPage} />;\n  }\n  if (getCharactersQuery.error) {\n    return <ErrorModal message={getCharactersQuery.error.message} />;\n  }\n\n  const characters = getCharactersQuery.data?.characters?.results;\n\n  return (\n    <Page data-testid={CHARACTERS_PAGE_TEST_ID}>\n      <CharactersList characters={characters} />\n      <Pagination\n        prev={getCharactersQuery.data?.characters?.info?.prev}\n        next={getCharactersQuery.data?.characters?.info?.next}\n      />\n    </Page>\n  );\n};\n\nexport default CharactersPage;\n","import React from 'react';\n\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport CharacterPage from './pages/Character/CharacterPage';\nimport CharactersPage from './pages/Characters/CharactersPage';\n\nconst Application = () => {\n  return (\n    <Switch>\n      <Route path=\"/characters/:characterId\" component={CharacterPage} />\n      <Route path=\"/characters\" component={CharactersPage} />\n      <Redirect to=\"/characters\" />\n    </Switch>\n  );\n};\n\nexport default Application;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { InMemoryCache } from '@apollo/client';\n\nimport { TypedTypePolicies } from './apollo-helpers';\n\nconst typePolicies: TypedTypePolicies = {};\n\nexport const cache = new InMemoryCache({ typePolicies });\n","import { ApolloClient, createHttpLink, ApolloLink } from '@apollo/client';\n\nimport { cache } from './cache';\n// import clientSchema from './graphql/client-schema.graphql';\n\nconst customFetch = (uri: string, options: Request) => {\n  if (typeof options.body == 'string') {\n    const { operationName } = JSON.parse(options.body);\n    uri = `${uri}?opName=${operationName}`;\n  }\n\n  return fetch(uri, options);\n};\n\nexport const getClient = () => {\n  const httpLink = createHttpLink({\n    uri: process.env.REACT_APP_API_URL,\n    fetch: customFetch,\n  });\n\n  return new ApolloClient({\n    cache,\n    // typeDefs: clientSchema,\n    link: ApolloLink.from([httpLink]),\n  });\n};\n\nexport const client = getClient();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Application from './Application';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter, BrowserRouter, HashRouterProps } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { client as apolloClient } from './apollo/client';\n\nconst Router = (process.env.REACT_APP_ROUTER === 'hash'\n  ? HashRouter\n  : BrowserRouter) as React.ElementType<HashRouterProps>;\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={apolloClient}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Application />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ErrorModal_modal__37r9E\",\"overlay\":\"ErrorModal_overlay__2kaMM\",\"modalHeader\":\"ErrorModal_modalHeader__1MJ7D\",\"modalFooter\":\"ErrorModal_modalFooter__14ubC\",\"modalBody\":\"ErrorModal_modalBody__2Ry-K\",\"modalTitle\":\"ErrorModal_modalTitle__135EU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__1Neu5\",\"wholePageCover\":\"Spinner_wholePageCover__23sOI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Page_page__2PgI3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Pagination_wrapper__1MyGX\"};"],"sourceRoot":""}