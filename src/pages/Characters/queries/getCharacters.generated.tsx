// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run npm run graphql:codegen to update

import * as Types from '../../../apollo/gen_types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type GetCharactersQueryVariables = Types.Exact<{
  page?: Types.Maybe<Types.Scalars['Int']>;
}>;

export type GetCharactersQuery = { __typename?: 'Query' } & {
  characters?: Types.Maybe<
    { __typename?: 'Characters' } & {
      info?: Types.Maybe<
        { __typename?: 'Info' } & Pick<
          Types.Info,
          'count' | 'pages' | 'next' | 'prev'
        >
      >;
      results?: Types.Maybe<
        Array<
          Types.Maybe<
            { __typename?: 'Character' } & Pick<
              Types.Character,
              'id' | 'name' | 'status' | 'species' | 'image'
            >
          >
        >
      >;
    }
  >;
};

export const GetCharactersDocument = gql`
  query getCharacters($page: Int) {
    characters(page: $page) {
      info {
        count
        pages
        next
        prev
      }
      results {
        id
        name
        status
        species
        image
      }
    }
  }
`;

/**
 * __useGetCharactersQuery__
 *
 * To run a query within a React component, call `useGetCharactersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCharactersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCharactersQuery({
 *   variables: {
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCharactersQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetCharactersQuery,
    GetCharactersQueryVariables
  >
) {
  return Apollo.useQuery<GetCharactersQuery, GetCharactersQueryVariables>(
    GetCharactersDocument,
    baseOptions
  );
}
export function useGetCharactersLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCharactersQuery,
    GetCharactersQueryVariables
  >
) {
  return Apollo.useLazyQuery<GetCharactersQuery, GetCharactersQueryVariables>(
    GetCharactersDocument,
    baseOptions
  );
}
export type GetCharactersQueryHookResult = ReturnType<
  typeof useGetCharactersQuery
>;
export type GetCharactersLazyQueryHookResult = ReturnType<
  typeof useGetCharactersLazyQuery
>;
export type GetCharactersQueryResult = Apollo.QueryResult<
  GetCharactersQuery,
  GetCharactersQueryVariables
>;
