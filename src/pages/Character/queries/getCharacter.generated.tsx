// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run npm run graphql:codegen to update

import * as Types from '../../../apollo/gen_types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type GetCharacterQueryVariables = Types.Exact<{
  characterId: Types.Scalars['ID'];
}>;

export type GetCharacterQuery = { __typename?: 'Query' } & {
  character?: Types.Maybe<
    { __typename?: 'Character' } & Pick<
      Types.Character,
      'id' | 'name' | 'status' | 'species' | 'type' | 'gender' | 'image'
    > & {
        origin?: Types.Maybe<
          { __typename?: 'Location' } & Pick<
            Types.Location,
            'name' | 'type' | 'dimension'
          >
        >;
        location?: Types.Maybe<
          { __typename?: 'Location' } & Pick<
            Types.Location,
            'id' | 'name' | 'type' | 'dimension'
          >
        >;
        episode?: Types.Maybe<
          Array<
            Types.Maybe<
              { __typename?: 'Episode' } & Pick<Types.Episode, 'id' | 'name'>
            >
          >
        >;
      }
  >;
};

export const GetCharacterDocument = gql`
  query getCharacter($characterId: ID!) {
    character(id: $characterId) {
      id
      name
      status
      species
      type
      gender
      origin {
        name
        type
        dimension
      }
      location {
        id
        name
        type
        dimension
      }
      image
      episode {
        id
        name
      }
    }
  }
`;

/**
 * __useGetCharacterQuery__
 *
 * To run a query within a React component, call `useGetCharacterQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCharacterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCharacterQuery({
 *   variables: {
 *      characterId: // value for 'characterId'
 *   },
 * });
 */
export function useGetCharacterQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetCharacterQuery,
    GetCharacterQueryVariables
  >
) {
  return Apollo.useQuery<GetCharacterQuery, GetCharacterQueryVariables>(
    GetCharacterDocument,
    baseOptions
  );
}
export function useGetCharacterLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCharacterQuery,
    GetCharacterQueryVariables
  >
) {
  return Apollo.useLazyQuery<GetCharacterQuery, GetCharacterQueryVariables>(
    GetCharacterDocument,
    baseOptions
  );
}
export type GetCharacterQueryHookResult = ReturnType<
  typeof useGetCharacterQuery
>;
export type GetCharacterLazyQueryHookResult = ReturnType<
  typeof useGetCharacterLazyQuery
>;
export type GetCharacterQueryResult = Apollo.QueryResult<
  GetCharacterQuery,
  GetCharacterQueryVariables
>;
